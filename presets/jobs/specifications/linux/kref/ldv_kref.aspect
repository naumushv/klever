before: file ("$this")
{
#include <linux/kref.h>
#include <linux/kobject.h>
#include <linux/types.h>
#include <linux/kobject.h>
#include <linux/spinlock.h>
#include <linux/refcount.h>
#include <linux/kernel.h>

}

around: define(REFCOUNT_INIT(n))
{
  ldv_kref_init(n)
}

static inline void ldv_refcount_set(refcount_t *r, int n);
static inline void ldv_kref_init(struct kref *kref);
static inline unsigned int ldv_kref_read(const struct kref *kref);
void ldv_put_device(struct device *dev);
void ldv_kobject_put(struct kobject *kobj);
struct device *ldv_get_device(struct device *dev);
struct kobject *ldv_kobject_get(struct kobject *kobj);
static inline int ldv_kref_put(struct kref *kref, void (*release)(struct kref *kref));
static inline int ldv_kref_put(struct kref *kref);
static inline void ldv_kref_get(struct kref *kref);


around: call(static inline void v4l2_device_get(..))
{
	return ldv_kref_get($arg1);
}

around: call(int v4l2_device_put(..))
{
	return ldv_kref_put(& $arg1->ref, $arg1->release);
}


around: call(static inline void refcount_set(..))
{
	return ldv_refcount_set($arg1,$arg2);
}


around: call(static inline void kref_init(..))
{
	return ldv_kref_init($arg1);
}

around: call(static inline unsigned int kref_read(..))
{
	return ldv_kref_read($arg1);
}

around: call(void put_device(..))
{
	return ldv_put_device($arg1);
}

around: call(void kobject_put(..))
{
	return ldv_kobject_put($arg1);
}

around: call(struct device get_device(..))
{
	return ldv_get_device($arg1);
}

around: call(struct kobject kobject_get(..))
{
	return ldv_kobject_get($arg1);
}

around: call(static inline int kref_put(..))
{
	return ldv_kref_put($arg1,$arg2);
}


around: call(static inline void kref_get(..))
{
	return ldv_kref_get($arg1);
}

around: call(static inline void refcount_inc(..))
{
	return ldv_kref_get($arg1);
}





